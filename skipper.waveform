/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file   skipper.waveform
 * @brief  Skipper CCD timing file, rules for waveform generation and scripting
 *
 * syntax (is case sensitive):
 *
 * WAVEFORM waveformlabel { rules }
 *
 * where rules (enclosed in curly braces) are as follows:
 *
 * [time]: [=timelabel] SET signallabel TO level;
 *
 * time: at least one time label is required, followed by colon
 *       (if omitted then SET... lines are all at the same time as previous time)
 *       arithmetic operations are allowed for time
 *       units are allowed to follow numbers, E.G. ns, us, ms
 *       ".+" means to add to the previous time
 *
 * =timelabel is an optional label for this time, which can be used elsewhere
 *
 * SET signallabel TO level; 
 * is required and must end with a semi-colon
 * signallabel and level can be defined anywhere
 *
 */


#define clockfreq  100000000                      /* 100 MHz master clock frequency in Hz */
#define sec        *(clockfreq)                   /* clock cycles per second   */
#define ms         *(clockfreq/1000)              /* clock cycles per millisec */
#define us         *(clockfreq/1000000)           /* clock cycles per microsec */
#define ns         *(clockfreq/10000000)          /* clock cycles per nanosecond */
#define clicks	   *(clockfreq/100000000)	  /* clock cycles per nanosecond */

/* Timing defines */
/* Generic timing parameters */
#define TICK	      #eval 1 clicks		  /* 10 nsec */
#define 1ms	      #eval 99997 clicks	  /* 999 usec */
#define 1us           #eval 1 us
#define 2us           #eval 2 us
#define 20us          #eval 20 us
#define 25us          #eval 25 us
#define 10ms          #eval 10 ms
#define 10us          #eval 10 us

/* Science timing parameters */
#define S_Overlap     #eval 50  us
#define P_Overlap     #eval 50  us
#define RG_Width      #eval 50  us
#define SW_Width      #eval 50  us
#define RG_Settle     #eval 50  us
#define SW_Settle     #eval 50  us
#define OG_Width      #eval 50  us
#define TG_Width      #eval 50  us


/* Integration times */
#define Ped_Int       #eval 5  us
#define Sig_Int       #eval 5  us

#define TDRT	      #eval 50  us		  /* 25 usec */
#define TOI           #eval 50  us		  /* Science parallel time slice */

#define TDX           #eval 10  clicks            /*  20 nsec */
#define TWDX          #eval 10  clicks		  /*  400 nsec */
#define TR1           60                          /* Time delay after serial phase 1 100 ns */
#define TR3	      60		          /* Time delay after serial phase 3 800 ns */
#define S2TORESET     #eval 20  clicks            /* serial 2 phase to reset timing */

#define RGDELAY       #eval 4   us		  /*  4 usec */
#define RGWIDTH       #eval 2   us		  /*  2 usec */

#define SC2WIDTH      30

/* Transfer gate pulse width */
#define TD2           #eval 10 us

/* Smooth pixel clocking */
#define T_ScienceSmoothPixel 122 /*#eval 1us*/
#define Rsettle 25 /* reset settling time */
#define SWsettle 5 /* summing well settling time */
#define T_ScienceSmoothPixel13 #eval T_ScienceSmoothPixel/3
#define T_ScienceSmoothPixel23 #eval T_ScienceSmoothPixel/3*2
#define SW_ScienceSmoothPixel  #eval (T_ScienceSmoothPixel + Rsettle - SWsettle)/2
#define TRST 10

/* Science timing fast parameters */
/* Science timing parameters */
#define FTDX           #eval 10 clicks            /*  100 nsec */
#define FTWDX          #eval 10 clicks		 /*  100 nsec */
#define FTR1           30 /*Time delay after serial phase 1 [x10ns]*/ /*Charge level length*/
#define FTR3	       30 /* Want to change this to 40 for a longer reset level*/      /*Time delay after serial phase 3 [x10ns]*/ /*Reset  level length*/
#define FS2TORESET     #eval 20 clicks            /* 200 nsec serial 2 phase to reset timing */

#define OVERLAP        #eval 10 clicks            /* overlap the serial clocks by 100 ns */
/* Guider timing parameters */
#define PDELAY        #eval 20 us                 /* 20 usec used by Tim's Leach code		*/
						  /* Use as a first approximation of		*/
						  /* timing					*/
#define SDELAY	      #eval 1 us		  /*  1 usec used by Tim's Leach Code		*/
#define SWDELAY	      #eval 1.12 us		  /*  1.12 usec used by Tim's Leach code	*/

/* Fake signal parameters */
#define HALFPIX       #eval 256 clicks             /* 500 ns */


/* Logical state defines */
#define OPEN		    1 /* Real shutter opens when low 1 */
#define CLOSE		    0 /* Real shutter closes when high 0 */
#define High		    1
#define Low		    0

#define leftClamped         0 /* This is set if the Archon clamp is left clamped */
#define PhiRHigh	    1   /* ZTF pin driver does not invert like the WaSP Pin Driver */
#define PhiRLow		    0

#define SWPhiHigh           1
#define SWPhiLow            0

/* Logical state defines */
#define HI		    1
#define LO		    0


//WAVEFORM Wait1ms {
// 1ms:			RETURN;
//}
//
//WAVEFORM Wait1us {
// 1us:			RETURN;
//}
//
//WAVEFORM Wait25us {
//  +25us:                RETURN;
//}
//
//WAVEFORM SyncParallel {
// 0:			SET CD3     TO _PAR_CLOCK_HIGH, FAST;
//			SET CD4     TO _PAR_CLOCK_HIGH, FAST;
//                        SET CD2     TO _PAR_CLOCK_HIGH, FAST;
//                        SET CD1     TO _PAR_CLOCK_LOW, FAST;
// .+TDRT:		SET CD3     TO _PAR_CLOCK_HIGH, FAST;
//			SET CD4     TO _PAR_CLOCK_HIGH, FAST;
//                        SET CD2     TO _PAR_CLOCK_LOW, FAST;
//                        SET CD1     TO _PAR_CLOCK_LOW, FAST;
//}
//
//WAVEFORM wParallelInversion {
// 0:                     SET CD1     TO _PAR_CLOCK_IDLE_LOW, FAST;
//                        SET CD2     TO _PAR_CLOCK_IDLE_LOW, FAST;
//                        SET CD3     TO _PAR_CLOCK_IDLE_LOW, FAST;
//                        SET CD4     TO _PAR_CLOCK_IDLE_LOW, FAST;
//			SET AB1     TO _PAR_CLOCK_IDLE_LOW, FAST;
//                        SET AB2     TO _PAR_CLOCK_IDLE_LOW, FAST;
//                        SET AB3     TO _PAR_CLOCK_IDLE_LOW, FAST;
//                        SET AB4     TO _PAR_CLOCK_IDLE_LOW, FAST;
//}
//
//WAVEFORM wAllSerialLow {
// 0:                     SET SClock1 TO _SER_CLOCK_LOW, FAST;
//                        SET SClock2 TO _SER_CLOCK_LOW, FAST;
//                        SET SClock3 TO _SER_CLOCK_LOW, FAST;
//}                        
//
WAVEFORM SerialReceiving {
 0:			SET SClock2 TO _SER_CLOCK_RCV, FAST;
			SET SClock1 TO _SER_CLOCK_RCV, FAST;
                        SET SClock3 TO _SER_CLOCK_LOW, FAST;
 .+S2TORESET:		SET RGClock TO PhiRHigh;
}

// Waveform ends with charge only in phase 3
// setting V3 in the first state is probably unnecessary
WAVEFORM SynchedParallelTransfer {
 0:                    SET V1    TO    _PAR_CLOCK_HIGH, FAST;
                       SET V3    TO    _PAR_CLOCK_HIGH, FAST; 
 .+TOI:                SET V3    TO    _PAR_CLOCK_LOW,  FAST;
 .+TOI:                SET V2    TO    _PAR_CLOCK_HIGH, FAST;
 .+TOI:                SET V1    TO    _PAR_CLOCK_LOW,  FAST;
 .+TOI:                SET V3    TO    _PAR_CLOCK_HIGH, FAST;
}

// Serial 1 and serial 2 start high
// Serial 1 and serial 2 end high
WAVEFORM SerialShift {
 0:                    SET SClock1  TO  _SER_CLOCK_LOW,FAST; // Now only in serial 2
  .+2us:               SET SClock3  TO  _SER_CLOCK_HIGH,FAST;
  .+2us:               SET SClock2  TO  _SER_CLOCK_LOW,FAST;
  .+2us:               SET SClock1  TO  _SER_CLOCK_HIGH,FAST;
  .+2us:               SET SClock3  TO  _SER_CLOCK_LOW,FAST;
  .+2us:               SET SClock2  TO  _SER_CLOCK_HIGH,FAST;
}
//
///* The waveform is spread out with no overlapping clocks */
//WAVEFORM OldSerialOutputClocking {
// 0:			SET SClock2      TO _SER_CLOCK_LOW, FAST;
//			SET SClock1      TO _SER_CLOCK_HIGH, FAST;
// .+S2TORESET:		SET RGClock      TO PhiRHigh;
// .+TWDX:		SET SWClock      TO SWPhiHigh;
//			SET SClock3      TO _SER_CLOCK_HIGH;
//                	SET SClock1      TO _SER_CLOCK_LOW;
// .+TDX:			SET RGClock      TO PhiRLow;
// .+TICK:		SET PIXEL        TO High;
// .+TICK:		SET PIXEL        TO Low;
//			SET FRAME        TO Low;
//			SET LINE         TO Low;
// .+TR3:			SET SWClock      TO SWPhiLow;
//			SET SClock3      TO _SER_CLOCK_LOW, FAST;
//			SET SClock2      TO _SER_CLOCK_HIGH, FAST;
// .+TR1:			SET NOP          TO Low;
//}
//
//WAVEFORM SerialOutputClocking {
//  0:    =resetreset   SET RGClock       TO PhiRHigh;
//                      SET SClock2       TO _SER_CLOCK_LOW, FAST;
// .+TWDX:              SET SWClock       TO SWPhiHigh;
//                      SET SClock3       TO _SER_CLOCK_HIGH, FAST;
//                      SET SClock1       TO _SER_CLOCK_LOW, FAST;
// .+TDX:               SET RGClock       TO PhiRLow;
// .+TICK:              SET PIXEL         TO High;
// .+TICK:              SET PIXEL         TO Low;
//                      SET FRAME         TO Low;
//                      SET LINE          TO Low;
// .+TR3: =chargelevel  SET SWClock       TO SWPhiLow;
//                      SET SClock3       TO _SER_CLOCK_LOW, FAST;
//                      SET SClock2       TO _SER_CLOCK_HIGH, FAST;
// .+SC2WIDTH: = dmz    SET SClock1       TO _SER_CLOCK_HIGH, FAST;
//                      SET SClock2       TO _SER_CLOCK_LOW, FAST;
// chargelevel+TR1:     RETURN;
//}
//
//
//
//
///*****************************************/
///* Here are the control signal waveforms */
///*****************************************/
//
WAVEFORM wOpenShutter {
 0:			SET SHUTTER TO OPEN;
}
WAVEFORM wCloseShutter {
 0:			SET SHUTTER TO CLOSE;
}
WAVEFORM wFrame {
 0:			SET FRAME TO High;
}
WAVEFORM wLine {
 0:			SET LINE TO High;
}
WAVEFORM wLine_triggered {
 0:                     SET SHUTTER TO OPEN;
 2000:                  SET SHUTTER TO CLOSE;
                        SET LINE TO High;

}
//WAVEFORM wPixel {
// 0:			SET PIXEL   TO High;
// .+TICK:		SET PIXEL   TO Low;
//			SET FRAME   TO Low;
//			SET LINE    TO Low;
//}
//
//WAVEFORM ADClamp {
// 0:			SET AD5     TO High;
//}
//
//WAVEFORM ADClamp_ {
// 0:			SET AD5     TO leftClamped;
//}
//
///* Magic board comm waveforms */
//// TXFRCLK is in signals
///*#define HBIT 25
///*
///*WAVEFORM LatchEnable {
///*0:         set TXFRCLK      to LO;
///*           set LATCH_ENABLE to HI;
///*.+ HBIT:   set TXFRCLK      to HI;
///*.+ HBIT:   RETURN;
///*}
///*
///*WAVEFORM LatchDisable {
///*0:         set TXFRCLK      to LO;
///*           set LATCH_ENABLE to LO;
///*.+ HBIT:   set TXFRCLK      to HI;
///*.+ HBIT:   RETURN;
///*}
///*
///**//* pull up resistor makes hi signal lo bit and vice versa */
///*
///*WAVEFORM WriteLoBit {
///*0:         set TXFRCLK to LO;
///*           set SREGOUT to HI;
///*.+ HBIT:   set TXFRCLK to HI;
///*.+ HBIT:   set SREGOUT to LO;
///*}
///*
///*WAVEFORM WriteHiBit {
///*0:         set TXFRCLK to LO;
///*           set SREGOUT to LO;
///*.+ HBIT:   set TXFRCLK to HI;
///*.+ HBIT:   set SREGOUT to HI;
///*}
///**/
//
///*WAVEFORM wTrigHi {
///* 0: SET TRIG TO HI;
///*}
///*WAVEFORM wTrigLo {
///* 0: SET TRIG TO LO;
///*}
///**/
WAVEFORM wIdle {
}

WAVEFORM SetParallelExpose {
 0:              SET V1   TO _PAR_CLOCK_LOW,  FAST;
                 SET V2   TO _PAR_CLOCK_LOW,  FAST;
                 SET V3   TO _PAR_CLOCK_HIGH, FAST;
}

// This is the state of the serial register when charge is dumped into it
WAVEFORM SerialReceiving {
 0:              SET SClock1 TO _SER_CLOCK_HIGH, FAST;
                 SET SClock3 TO _SER_CLOCK_HIGH, FAST;
                 SET SClock2 TO _SER_CLOCK_LOW,  FAST;
                 SET DGClock TO _DG_CLOCK_HIGH,  FAST;
                 SET RGClock TO _RG_CLOCK_HIGH,  FAST;
}

// Go to state after SerialReceiving and through transfer
WAVEFORM SerialTransfer {
 0:              SET S3U     TO _SER_CLOCK_LOW,  FAST; // STATE_3 (DG?)
                 SET S1L     TO _SER_CLOCK_LOW,  FAST;
                 SET DGClock TO _DG_CLOCK_LOW,   FAST;
 .+S_Overlap:    SET SClock2 TO _SER_CLOCK_HIGH, FAST;  // STATE_4
 .+S_Overlap:    SET S3L     TO _SER_CLOCK_LOW,  FAST;  // STATE_5
                 SET S1U     TO _SER_CLOCK_LOW,  FAST;
 .+S_Overlap:    SET S3U     TO _SER_CLOCK_HIGH, FAST;  // STATE_6
                 SET S1L     TO _SER_CLOCK_HIGH, FAST;
 .+S_Overlap:    SET SClock2 TO _SER_CLOCK_LOW,  FAST;  // STATE_7
 .+S_Overlap:    SET S3L     TO _SER_CLOCK_HIGH, FAST;  // STATE_8
                 SET S1U     TO _SER_CLOCK_HIGH, FAST;
}

WAVEFORM wReset {
  0:              SET RGClock TO _RG_CLOCK_LOW,   FAST;  // STATE_10RG
 .+RG_Width:     SET RGClock TO _RG_CLOCK_HIGH,  FAST;  // back to STATE_8
}

WAVEFORM SkipperSamples {
 RG_Settle:      SET AD5     TO High;  // Not sure what HD1 is STATE_8B
 .+Ped_Int:      SET AD5     TO Low;
                 SET SWClock TO _SW_CLOCK_HIGH,  FAST;  // STATE_9
 .+SW_Width:     SET SWClock TO _SW_CLOCK_LOW,   FAST;  // STATE_10A
                 SET AD5     TO High,            FAST;
 .+Sig_Int:      SET AD5     TO Low,             FAST;  // STATE_10RB
                 SET OGClock TO _OG_CLOCK_LOW,   FAST;
 .+OG_Width:     SET OGClock TO _OG_CLOCK_HIGH,  FAST;

}
                 
WAVEFORM ParallelTransfer {
 0:              SET V1   TO _PAR_CLOCK_HIGH, FAST;  // STATE_11
                 SET V3   TO _PAR_CLOCK_HIGH, FAST;
                 SET V2   TO _PAR_CLOCK_LOW,  FAST;
 .+P_Overlap:    SET V3   TO _PAR_CLOCK_LOW,  FAST;  // STATE_12
 .+P_Overlap:    SET V2   TO _PAR_CLOCK_HIGH, FAST;  // STATE_13
 .+P_Overlap:    SET V1   TO _PAR_CLOCK_LOW,  FAST;  // STATE_14
 .+P_Overlap:    SET V3   TO _PAR_CLOCK_HIGH, FAST;  // STATE_15
 .+P_Overlap:    SET V2   TO _PAR_CLOCK_LOW,  FAST;  // STATE_16
                 SET TG   TO _TG_CLOCK_HIGH,  FAST;
 .+TG_Width:     SET TG   TO _TG_CLOCK_LOW,   FAST;  // Steve added to separate parallels and serial register while serial clocking
}
//
//#define TGwidth    10us
//#define TGsettle   10us
//#define BLCwidth   1000
//#define BLCsettle  1000
//#define ADCclampT  1000
//
///* SW slow slew rate 20    */
///* P* slow slew rate 0.015      */
///* S* slow slew rate 34 */ /* This is PixelT/3 */
//
///* Parameterized timing */
//#define RefSamples   #eval PixelT/2  /* Half pixel time, when charge is dumped on sense node */
//#define RGT          8  /* Width of the reset gate pulse               200ns */ /* Static */
//#define SWslewT       3  /* Want SW to go high ASAP so minimize this     30ns */ /* Static, but use for SW slow slew */
//
//
//
//
//WAVEFORM LoadSerialRegister {
// 0:                           SET TGClock   TO _TG_CLOCK_HIGH, SLOW;
// TGwidth:                     SET TGClock   TO _TG_CLOCK_LOW, SLOW;
// .+TGsettle:                  RETURN;
//}
//
//
//
//WAVEFORM TPixel {
//                              #include kpfReadPixel.h
//}
//
//
///* From two phase receiving to hold charge in 1 phase before moving */
//WAVEFORM InitialClock2Low {
// 0:                       SET SClock2 TO _SER_CLOCK_LOW, FAST;
// .+1us:                   RETURN;
//}
//
///* This is the same as TPixel, but there are no control signals, so the pixel won't get converted */
//WAVEFORM PixelShift {
// 0:                        SET RGClock TO PhiRHigh;
// RGT:                      SET RGClock TO PhiRLow;
// RefSamples: =ChgDump      SET SWClock TO SWPhiLow;
// /*.+SWsettleT:*/ /* Need this in the CDS parameters */ /* Signal samples start here */
// /*.+SigSamples: = PixelT*/ /* Need in CDS parameters .+SWsettleT + PixelT */
// /* SW starts going high again as soon as charge dump has completed *
//* so rise time is as long as possible, even extending into next pixel! */
//  ChgDump+SWslewT:            SET SWClock TO SWPhiHigh;
//
///* Coincident Sx edges are spread equally throughout pixel. *
//* NB: Sx Slew Time must be set elsewhere to Tpixel/3. *
//* Charge is stored on S2 initially */
//
// 0:                          SET SClock3 TO _SER_CLOCK_HIGH, SLOW;
//                             SET SClock1 TO _SER_CLOCK_LOW, SLOW;
//.+PixelT/3:                  SET SClock2 TO _SER_CLOCK_HIGH, SLOW;
//                             SET SClock3 TO _SER_CLOCK_LOW, SLOW;
//.+PixelT/3:                  SET SClock1 TO _SER_CLOCK_HIGH, SLOW;
//                             SET SClock2 TO _SER_CLOCK_LOW, SLOW;
//.+PixelT/3:                  RETURN;
//}
//
//WAVEFORM P23to34 { 
// 0:                           SET P4 TO _PAR_CLOCK_HIGH, SLOW; /* AB4, CD1 */
//                              SET P2 TO _PAR_CLOCK_LOW, SLOW;  /* AB2, CD3 */
//                              #include ReadPixel.h
//}
//
//WAVEFORM P34to41 { 
// 0:                           SET P1 TO _PAR_CLOCK_HIGH, SLOW; /* AB1, CD2 */
//                              SET P3 TO _PAR_CLOCK_LOW, SLOW;  /* AB3, CD4 */
//                              #include ReadPixel.h
//}
//
//WAVEFORM P41to12 {
// 0:                           SET P2 TO _PAR_CLOCK_HIGH, SLOW; /* AB2, CD3 */
//                              SET P4 TO _PAR_CLOCK_LOW, SLOW;  /* AB4, CD1 */
//                              #include ReadPixel.h
//}
//
//WAVEFORM P12to23 {
// 0:                          SET P3 TO _PAR_CLOCK_HIGH, SLOW;  /* AB3, CD4 */
//                             SET P1 TO _PAR_CLOCK_LOW, SLOW;   /* AB1, CD2 */
//                             #include ReadPixel.h
//}

